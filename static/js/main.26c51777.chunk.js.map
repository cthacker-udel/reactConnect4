{"version":3,"sources":["index.js"],"names":["BoardButton","props","useState","hasClicked","setHasClicked","theVariant","setTheVariant","setTeam","coordObj","variant","name","theName","onClick","event","console","log","target","theCoord","parseInt","substring","alert","theTurn","tmpBoard","playerBoard","setPlayerBoard","setTheTurn","winnerCheck","id","Board","choices","turn","setTurn","board","setBoard","verifyWinner","playerList","i","length","j","k","l","push","Set","size","x","y","generateButton","value","style","textAlign","pill","bg","striped","bordered","hover","height","width","MainPage","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.26c51777.chunk.js","sourcesContent":["import React, {useState} from 'react';\r\nimport ReactDOM, { render } from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Offcanvas from 'react-bootstrap/Offcanvas';\r\nimport Badge from 'react-bootstrap/Badge'\r\n\r\n\r\nfunction BoardButton(props){\r\n\r\n    const [hasClicked,setHasClicked] = useState(false);\r\n    const [theVariant,setTheVariant] = useState('outline-primary');\r\n    const [team,setTeam] = useState(\"\");\r\n\r\n    const coordObj = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5}\r\n\r\n    const clickFunc = (event) => {\r\n\r\n        console.log(event.target.name);\r\n\r\n        const theCoord = [parseInt(event.target.name.substring(1))-1,coordObj[event.target.name[0]]];\r\n\r\n        console.log(`The coord = ${theCoord}`);\r\n\r\n        //console.log(hasClicked);\r\n\r\n        if(!hasClicked){\r\n            setHasClicked(!hasClicked);\r\n            if(!props.theTurn){\r\n                // players turn\r\n                setTheVariant('success');\r\n                setTeam(\"1\");\r\n                let tmpBoard = props.playerBoard;\r\n                tmpBoard[theCoord[0]][theCoord[1]] = '1';\r\n                props.setPlayerBoard(tmpBoard);\r\n            }\r\n            else{\r\n                // computers turn\r\n                setTheVariant('danger');\r\n                setTeam(\"2\");\r\n                let tmpBoard = props.playerBoard;\r\n                tmpBoard[theCoord[0]][theCoord[1]] = '2';\r\n                props.setPlayerBoard(tmpBoard);\r\n            }\r\n            props.setTheTurn(!props.theTurn);\r\n        }\r\n        else{\r\n            alert('Button has already been clicked');\r\n        }\r\n\r\n        props.winnerCheck(props.playerBoard);\r\n        /*\r\n        let theStr = \"\";\r\n        for(let i = 0; i < props.playerBoard.length; i++){\r\n            theStr += `${props.playerBoard[i]}\\n`;\r\n        }\r\n        console.log(theStr);\r\n        */\r\n    }\r\n\r\n\r\n    return(\r\n\r\n        <Button variant={theVariant} name={props.theName} onClick={clickFunc} id={props.theName}>{props.theName}</Button>\r\n\r\n    );\r\n\r\n}\r\n\r\nfunction Board(){\r\n\r\n    //[['A1','B1','C1','D1'],['A2','B2','C2','D2'],['A3','B3','C3','D3'],['A4','B4','C4','D4'],['A5','B5','C5','D5']]\r\n\r\n    const [choices,setChoices] = useState([['A1','B1','C1','D1','E1'],['A2','B2','C2','D2','E2'],['A3','B3','C3','D3','E3'],['A4','B4','C4','D4','E4'],['A5','B5','C5','D5','E5']]);\r\n    const [turn,setTurn] = useState(false); // false <-- user turn, true <--- player turn\r\n    const [board,setBoard] = useState([['','','','','',''],['','','','','',''],['','','','','',''],['','','','','',''],['','','','','','']]);\r\n\r\n\r\n    const verifyWinner = (board) => {\r\n\r\n        // diagonal check\r\n        let playerList = [];\r\n        for(let i = 0; i < board.length; i++){\r\n\r\n            for(let j = 0; j < board.length; j++){\r\n\r\n                // picks coordinates, then check from the coords\r\n                /*\r\n                            --- diagonals ---\r\n\r\n                    1) topleft ---> bottom right\r\n                    2) topright --> bottom left\r\n\r\n                            --- compass directions ---\r\n\r\n                    1) up\r\n                    2) down\r\n                    3) right\r\n                    4) left\r\n\r\n                */\r\n\r\n                // [2][2] --> [3][1] --> [4][0]\r\n                for(let k = i, l = j; k < board.length && l < board.length; k++, l++){\r\n\r\n                    if(board[k][l] !== ''){\r\n                        playerList.push(board[k][l]);\r\n                    }\r\n                    if(new Set(playerList).size > 1){\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                if(new Set(playerList).size === 1 && playerList.length >= 4){\r\n                    alert(`Player ${playerList[0]} wins!`);\r\n                    return;\r\n                }\r\n                playerList = [];\r\n\r\n                for(let x = i, y = j; x < board.length && y >= 0; x++, y--){\r\n\r\n                    if(board[x][y] !== ''){\r\n                        playerList.push(board[x][y]);\r\n                    }\r\n                    if(new Set(playerList).size > 1){\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                if(new Set(playerList).size === 1 && playerList.length >= 4){\r\n                    alert(`Player ${playerList[0]} wins!`);\r\n                    return;\r\n                }\r\n                playerList = [];\r\n\r\n                // up --> [1][1] --> [0][1]\r\n\r\n\r\n                for(let x = i; x >= 0; x--){\r\n\r\n                    if(board[x][j] !== ''){\r\n                        playerList.push(board[x][j]);\r\n                    }\r\n                    if(new Set(playerList).size > 1){\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                if(new Set(playerList).size === 1 && playerList.length >= 4){\r\n                    alert(`Player ${playerList[0]} wins!`);\r\n                    return;\r\n                }\r\n                playerList = [];\r\n\r\n\r\n                // right --> [1][1] --> [1][2]\r\n\r\n                for(let y = j; y < board.length; y++){\r\n\r\n                    if(board[i][y] !== ''){\r\n                        playerList.push(board[i][y]);\r\n                    }\r\n                    if(new Set(playerList).size > 1){\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                if(new Set(playerList).size === 1 && playerList.length >= 4){\r\n                    alert(`Player ${playerList[0]} wins!`);\r\n                    return;\r\n                }\r\n                playerList = [];\r\n\r\n                // down --> [1][1] --> [2][1]\r\n\r\n                for(let x = i; x < board.length; x++){\r\n\r\n                    if(board[x][j] !== ''){\r\n                        playerList.push(board[x][j]);\r\n                    }\r\n                    if(new Set(playerList).size > 1){\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                if(new Set(playerList).size === 1 && playerList.length >= 4){\r\n                    alert(`Player ${playerList[0]} wins!`);\r\n                    return;\r\n                }\r\n                playerList = [];\r\n\r\n\r\n                // left --> [1][1] ---> [1][0]\r\n\r\n\r\n                for(let y = j; y >= 0; y--){\r\n\r\n                    if(board[i][y] !== ''){\r\n                        playerList.push(board[i][y]);\r\n                    }\r\n                    if(new Set(playerList).size > 1){\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                if(new Set(playerList).size === 1 && playerList.length >= 4){\r\n                    alert(`Player ${playerList[0]} wins!`);\r\n                    return;\r\n                }\r\n\r\n\r\n                alert(`No winners detected`);\r\n                return;\r\n\r\n            }\r\n\r\n        }\r\n\r\n\r\n    }\r\n\r\n\r\n    const generateButton = (value) => {\r\n\r\n        return(\r\n\r\n            <BoardButton theName={value} theTurn={turn} setTheTurn={setTurn}  playerBoard={board} setPlayerBoard={setBoard} winnerCheck={verifyWinner}>{value}</BoardButton>\r\n\r\n        );\r\n\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Row>\r\n                <Col style={{textAlign: \"center\"}}>\r\n                    <h2><Badge pill bg=\"secondary\">Connect-4</Badge></h2>\r\n                </Col>\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Table striped bordered hover>\r\n\r\n                        <thead>\r\n                            <tr style={{textAlign: \"center\"}}>\r\n                                <th>\r\n                                    Column\r\n                                </th>\r\n                                <th>\r\n                                    A\r\n                                </th>\r\n                                <th>\r\n                                    B\r\n                                </th>\r\n                                <th>\r\n                                    C\r\n                                </th>\r\n                                <th>\r\n                                    D\r\n                                </th>\r\n                                <th>\r\n                                    E\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody style={{textAlign: \"center\"}}>\r\n\r\n                            <tr style={{height: \"200px\"}}>\r\n                                <td style={{width: \"10px\"}}><Badge pill bg=\"primary\">Column 1</Badge></td>\r\n                                <td>{generateButton(choices[0][0])}</td>\r\n                                <td>{generateButton(choices[0][1])}</td>\r\n                                <td>{generateButton(choices[0][2])}</td>\r\n                                <td>{generateButton(choices[0][3])}</td>\r\n                                <td>{generateButton(choices[0][4])}</td>\r\n                            </tr>\r\n                            <tr style={{height: \"200px\"}}>\r\n                                <td style={{width: \"10px\"}}><Badge pill bg=\"primary\">Column 2</Badge></td>\r\n                                <td>{generateButton(choices[1][0])}</td>\r\n                                <td>{generateButton(choices[1][1])}</td>\r\n                                <td>{generateButton(choices[1][2])}</td>\r\n                                <td>{generateButton(choices[1][3])}</td>\r\n                                <td>{generateButton(choices[1][4])}</td>\r\n                            </tr>\r\n                            <tr style={{height: \"200px\"}}>\r\n                            <td style={{width: \"10px\"}}><Badge pill bg=\"primary\">Column 3</Badge></td>\r\n                                <td>{generateButton(choices[2][0])}</td>\r\n                                <td>{generateButton(choices[2][1])}</td>\r\n                                <td>{generateButton(choices[2][2])}</td>\r\n                                <td>{generateButton(choices[2][3])}</td>\r\n                                <td>{generateButton(choices[2][4])}</td>\r\n                            </tr>\r\n                            <tr style={{height: \"200px\"}}>\r\n                            <td style={{width: \"10px\"}}><Badge pill bg=\"primary\">Column 4</Badge></td>\r\n                                <td>{generateButton(choices[3][0])}</td>\r\n                                <td>{generateButton(choices[3][1])}</td>\r\n                                <td>{generateButton(choices[3][2])}</td>\r\n                                <td>{generateButton(choices[3][3])}</td>\r\n                                <td>{generateButton(choices[3][4])}</td>\r\n                            </tr>\r\n                            <tr style={{height: \"200px\"}}>\r\n                            <td style={{width: \"10px\"}}><Badge pill bg=\"primary\">Column 5</Badge></td>\r\n                                <td>{generateButton(choices[4][0])}</td>\r\n                                <td>{generateButton(choices[4][1])}</td>\r\n                                <td>{generateButton(choices[4][2])}</td>\r\n                                <td>{generateButton(choices[4][3])}</td>\r\n                                <td>{generateButton(choices[4][4])}</td>\r\n                            </tr>\r\n\r\n\r\n                        </tbody>\r\n\r\n\r\n                    </Table>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n\r\n    );\r\n\r\n\r\n}\r\n\r\n\r\nfunction MainPage(){\r\n\r\n    return(\r\n        <>\r\n            <Board />\r\n        </>\r\n\r\n    );\r\n\r\n\r\n\r\n}\r\n\r\n\r\nReactDOM.render(\r\n\r\n    <React.StrictMode>\r\n\r\n        <MainPage />\r\n\r\n    </React.StrictMode>,document.getElementById('root')\r\n\r\n\r\n);"],"sourceRoot":""}