{"version":3,"sources":["index.tsx"],"names":["BoardButton","props","useState","theVariant","setTheVariant","setTeam","coordObj","variant","name","theName","onClick","event","changedElement","target","console","log","theCoord","parseInt","substring","i","playerBoard","length","element","document","getElementById","id","className","theTurn","tmpBoard","setPlayerBoard","setTheTurn","theList","btnList","concat","setBtnList","alert","winnerRes","winnerCheck","winnerUpdate","Board","choices","turn","setTurn","board","setBoard","buttonList","setButtonList","winsP1","setWinsP1","winsP2","setWinsP2","useEffect","updateWins","winner","winsP1Tmp","winsP2Tmp","verifyWinner","playerList","j","k","l","push","Set","size","x","y","generateButton","value","style","textAlign","pill","bg","eachid","elem","striped","bordered","hover","height","width","MainPage","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.c467f7f6.chunk.js","sourcesContent":["import React, {useState, useEffect, MouseEventHandler, MouseEvent} from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport Button from 'react-bootstrap/Button';\r\nimport Row from 'react-bootstrap/Row';\r\nimport Col from 'react-bootstrap/Col';\r\nimport Table from 'react-bootstrap/Table';\r\nimport Badge from 'react-bootstrap/Badge'\r\n\r\n\r\nfunction BoardButton(props: {children: string, theTurn: boolean, theName: string, setTheTurn: React.Dispatch<React.SetStateAction<boolean>>, playerBoard: string[][], setPlayerBoard: React.Dispatch<React.SetStateAction<string[][]>>, winnerCheck: (board: string[][]) => number, id: string, setBtnList: React.Dispatch<React.SetStateAction<string[]>>, btnList: string[], winnerUpdate: (winner:number) => void}){\r\n                                //<BoardButton theName={value} theTurn={turn} setTheTurn={setTurn}  playerBoard={board} setPlayerBoard={setBoard} winnerCheck={verifyWinner} id={value} setBtnList={setButtonList} btnList={buttonList}  winnerUpdate={updateWins}>{value}</BoardButton>\r\n\r\n    const [theVariant,setTheVariant] = useState<string>('outline-primary');\r\n    const [team,setTeam] = useState<string>(\"\");\r\n\r\n    //const coordObj = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5}\r\n\r\n    interface coords {\r\n\r\n        [index: string]: number\r\n        'A': number\r\n        'B': number\r\n        'C': number\r\n        'D': number\r\n        'E': number\r\n        'F': number\r\n\r\n    }\r\n\r\n    const coordObj: coords = {'A': 0, 'B': 1, 'C': 2, 'D': 3, 'E': 4, 'F': 5};\r\n\r\n    const clickFunc = (event: MouseEvent) => {\r\n\r\n        let changedElement = event.target as HTMLInputElement;\r\n\r\n        console.log(changedElement.name);\r\n\r\n        const theCoord = [parseInt(changedElement.name.substring(1))-1,coordObj[changedElement.name[0]]];\r\n\r\n        console.log(`The coord = ${theCoord}`);\r\n\r\n        for(let i = 0; i < props.playerBoard.length; i++){\r\n            console.log(props.playerBoard[i]);\r\n        }\r\n\r\n        //console.log(hasClicked);\r\n\r\n        let element: HTMLElement | null = document.getElementById(props.id);\r\n\r\n        if(element !== null && element.className === \"btn btn-outline-primary\"){\r\n            if(!props.theTurn){\r\n                // players turn\r\n                setTheVariant('success');\r\n                setTeam(\"1\");\r\n                let tmpBoard = props.playerBoard;\r\n                tmpBoard[theCoord[0]][theCoord[1]] = '1';\r\n                props.setPlayerBoard(tmpBoard);\r\n                element.className = \"btn btn-success\";\r\n            }\r\n            else{\r\n                // computers turn\r\n                setTheVariant('danger');\r\n                setTeam(\"2\");\r\n                let tmpBoard = props.playerBoard;\r\n                tmpBoard[theCoord[0]][theCoord[1]] = '2';\r\n                props.setPlayerBoard(tmpBoard);\r\n                element.className = \"btn btn-danger\";\r\n            }\r\n            props.setTheTurn(!props.theTurn);\r\n            let theList = props.btnList;\r\n            theList = theList.concat(props.id);\r\n            props.setBtnList(theList);\r\n            console.log(`updated button list = ${props.btnList}`);\r\n            \r\n        }\r\n        else{\r\n            alert('Button has already been clicked');\r\n        }\r\n\r\n        const winnerRes = props.winnerCheck(props.playerBoard);\r\n        if(winnerRes === 1 || winnerRes === 2){\r\n            props.winnerUpdate(winnerRes);\r\n        }\r\n        /*\r\n        let theStr = \"\";\r\n        for(let i = 0; i < props.playerBoard.length; i++){\r\n            theStr += `${props.playerBoard[i]}\\n`;\r\n        }\r\n        console.log(theStr);\r\n        */\r\n    }\r\n\r\n\r\n    return(\r\n\r\n        <Button variant={theVariant} name={props.theName} onClick={clickFunc} id={props.theName}>{props.theName}</Button>\r\n\r\n    );\r\n\r\n}\r\n\r\nfunction Board(){\r\n\r\n    //[['A1','B1','C1','D1'],['A2','B2','C2','D2'],['A3','B3','C3','D3'],['A4','B4','C4','D4'],['A5','B5','C5','D5']]\r\n\r\n    const [choices,setChoices] = useState<string[][]>([['A1','B1','C1','D1','E1'],['A2','B2','C2','D2','E2'],['A3','B3','C3','D3','E3'],['A4','B4','C4','D4','E4'],['A5','B5','C5','D5','E5']]);\r\n    const [turn,setTurn] = useState<boolean>(false); // false <-- user turn, true <--- player turn\r\n    const [board,setBoard] = useState<string[][]>([['','','','','',''],['','','','','',''],['','','','','',''],['','','','','',''],['','','','','','']]);\r\n    const [buttonList,setButtonList] = useState<string[]>([]);\r\n    const [winsP1,setWinsP1] = useState<number>(0);\r\n    const [winsP2,setWinsP2] = useState<number>(0);\r\n\r\n    useEffect(() => {\r\n\r\n        console.log(`using effect`);\r\n\r\n    })\r\n\r\n\r\n    const updateWins = (winner: number) => {\r\n\r\n        if(winner === 1){\r\n            let winsP1Tmp = winsP1;\r\n            winsP1Tmp++;\r\n            setWinsP1(winsP1Tmp);\r\n        }\r\n        else if(winner === 2){\r\n            let winsP2Tmp = winsP2;\r\n            winsP2Tmp++;\r\n            setWinsP2(winsP2Tmp);\r\n        }\r\n\r\n    }\r\n\r\n    const wipeBoard = () => {\r\n\r\n        console.log(`the board list is : ${buttonList}`);\r\n\r\n        let theList = buttonList;\r\n\r\n        let newBoard = [['','','','','',''],['','','','','',''],['','','','','',''],['','','','','',''],['','','','','','']];\r\n        setBoard(newBoard);\r\n        setTurn(false);\r\n        for(let eachid of theList){\r\n            let elem: HTMLElement | null = document.getElementById(eachid);\r\n            console.log(elem);\r\n            if(elem !== null){\r\n                elem.className = \"btn btn-outline-primary\";\r\n            }\r\n            console.log(elem);\r\n        }\r\n        setButtonList([]);\r\n\r\n    }\r\n\r\n    const verifyWinner = (board: string[][]) => {\r\n\r\n        // diagonal check\r\n        let playerList = [];\r\n        for(let i = 0; i < board.length; i++){\r\n\r\n            for(let j = 0; j < board.length; j++){\r\n\r\n                // picks coordinates, then check from the coords\r\n                /*\r\n                            --- diagonals ---\r\n                    1) topleft ---> bottom right\r\n                    2) topright --> bottom left\r\n                            --- compass directions ---\r\n                    1) up\r\n                    2) down\r\n                    3) right\r\n                    4) left\r\n                */\r\n\r\n                // [2][2] --> [3][1] --> [4][0]\r\n                for(let k = i, l = j; k < board.length && l < board.length; k++, l++){\r\n\r\n                    if(board[k][l] !== ''){\r\n                        playerList.push(board[k][l]);\r\n                    }\r\n                    if(new Set(playerList).size > 1){\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                if(new Set(playerList).size === 1 && playerList.length >= 4){\r\n                    alert(`Player ${playerList[0]} wins!`);\r\n                    return parseInt(playerList[0]);\r\n                }\r\n                playerList = [];\r\n\r\n                for(let x = i, y = j; x < board.length && y >= 0; x++, y--){\r\n\r\n                    if(board[x][y] !== ''){\r\n                        playerList.push(board[x][y]);\r\n                    }\r\n                    if(new Set(playerList).size > 1){\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                if(new Set(playerList).size === 1 && playerList.length >= 4){\r\n                    alert(`Player ${playerList[0]} wins!`);\r\n                    return parseInt(playerList[0]);\r\n                }\r\n                playerList = [];\r\n\r\n                // up --> [1][1] --> [0][1]\r\n\r\n\r\n                for(let x = i; x >= 0; x--){\r\n\r\n                    if(board[x][j] !== ''){\r\n                        playerList.push(board[x][j]);\r\n                    }\r\n                    if(new Set(playerList).size > 1){\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                if(new Set(playerList).size === 1 && playerList.length >= 4){\r\n                    alert(`Player ${playerList[0]} wins!`);\r\n                    return parseInt(playerList[0]);\r\n                }\r\n                playerList = [];\r\n\r\n\r\n                // right --> [1][1] --> [1][2]\r\n\r\n                for(let y = j; y < board.length; y++){\r\n\r\n                    if(board[i][y] !== ''){\r\n                        playerList.push(board[i][y]);\r\n                    }\r\n                    if(new Set(playerList).size > 1){\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                if(new Set(playerList).size === 1 && playerList.length >= 4){\r\n                    alert(`Player ${playerList[0]} wins!`);\r\n                    return parseInt(playerList[0]);\r\n                }\r\n                playerList = [];\r\n\r\n                // down --> [1][1] --> [2][1]\r\n\r\n                for(let x = i; x < board.length; x++){\r\n\r\n                    if(board[x][j] !== ''){\r\n                        playerList.push(board[x][j]);\r\n                    }\r\n                    if(new Set(playerList).size > 1){\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                if(new Set(playerList).size === 1 && playerList.length >= 4){\r\n                    alert(`Player ${playerList[0]} wins!`);\r\n                    return parseInt(playerList[0]);\r\n                }\r\n                playerList = [];\r\n\r\n\r\n                // left --> [1][1] ---> [1][0]\r\n\r\n\r\n                for(let y = j; y >= 0; y--){\r\n\r\n                    if(board[i][y] !== ''){\r\n                        playerList.push(board[i][y]);\r\n                    }\r\n                    if(new Set(playerList).size > 1){\r\n                        break;\r\n                    }\r\n\r\n                }\r\n                if(new Set(playerList).size === 1 && playerList.length >= 4){\r\n                    alert(`Player ${playerList[0]} wins!`);\r\n                    return parseInt(playerList[0]);\r\n                }\r\n\r\n\r\n\r\n            }\r\n\r\n        }\r\n        return 0;\r\n\r\n\r\n    }\r\n\r\n\r\n    const generateButton = (value: string): JSX.Element => {\r\n\r\n        return(\r\n\r\n            <BoardButton theName={value} theTurn={turn} setTheTurn={setTurn}  playerBoard={board} setPlayerBoard={setBoard} winnerCheck={verifyWinner} id={value} setBtnList={setButtonList} btnList={buttonList}  winnerUpdate={updateWins}>{value}</BoardButton>\r\n\r\n        );\r\n\r\n    }\r\n\r\n    return(\r\n        <>\r\n            <Row>\r\n                <Col style={{textAlign: \"center\"}}>\r\n                    <h2><Badge pill bg=\"secondary\">Connect-4</Badge></h2>\r\n                </Col>\r\n                <Col style={{textAlign: \"center\"}}>\r\n                    <h2><Badge pill bg={turn? \"danger\": \"success\"}>Current Player</Badge></h2>\r\n                </Col>\r\n                <Col style={{textAlign: \"center\"}}>\r\n                    <Button variant=\"dark\" onClick={wipeBoard}>Clear board</Button>\r\n                </Col>\r\n                <Col>\r\n                    <h3><Badge pill >{`P1 Wins: ${winsP1} | P2 Wins: ${winsP2}`}</Badge></h3>\r\n                </Col>\r\n\r\n            </Row>\r\n            <Row>\r\n                <Col>\r\n                    <Table striped bordered hover>\r\n\r\n                        <thead>\r\n                            <tr style={{textAlign: \"center\"}}>\r\n                                <th>\r\n                                    Column\r\n                                </th>\r\n                                <th>\r\n                                    A\r\n                                </th>\r\n                                <th>\r\n                                    B\r\n                                </th>\r\n                                <th>\r\n                                    C\r\n                                </th>\r\n                                <th>\r\n                                    D\r\n                                </th>\r\n                                <th>\r\n                                    E\r\n                                </th>\r\n                            </tr>\r\n                        </thead>\r\n                        <tbody style={{textAlign: \"center\"}}>\r\n\r\n                            <tr style={{height: \"200px\"}}>\r\n                                <td style={{width: \"10px\"}}><Badge pill bg=\"primary\">Column 1</Badge></td>\r\n                                <td>{generateButton(choices[0][0])}</td>\r\n                                <td>{generateButton(choices[0][1])}</td>\r\n                                <td>{generateButton(choices[0][2])}</td>\r\n                                <td>{generateButton(choices[0][3])}</td>\r\n                                <td>{generateButton(choices[0][4])}</td>\r\n                            </tr>\r\n                            <tr style={{height: \"200px\"}}>\r\n                                <td style={{width: \"10px\"}}><Badge pill bg=\"primary\">Column 2</Badge></td>\r\n                                <td>{generateButton(choices[1][0])}</td>\r\n                                <td>{generateButton(choices[1][1])}</td>\r\n                                <td>{generateButton(choices[1][2])}</td>\r\n                                <td>{generateButton(choices[1][3])}</td>\r\n                                <td>{generateButton(choices[1][4])}</td>\r\n                            </tr>\r\n                            <tr style={{height: \"200px\"}}>\r\n                            <td style={{width: \"10px\"}}><Badge pill bg=\"primary\">Column 3</Badge></td>\r\n                                <td>{generateButton(choices[2][0])}</td>\r\n                                <td>{generateButton(choices[2][1])}</td>\r\n                                <td>{generateButton(choices[2][2])}</td>\r\n                                <td>{generateButton(choices[2][3])}</td>\r\n                                <td>{generateButton(choices[2][4])}</td>\r\n                            </tr>\r\n                            <tr style={{height: \"200px\"}}>\r\n                            <td style={{width: \"10px\"}}><Badge pill bg=\"primary\">Column 4</Badge></td>\r\n                                <td>{generateButton(choices[3][0])}</td>\r\n                                <td>{generateButton(choices[3][1])}</td>\r\n                                <td>{generateButton(choices[3][2])}</td>\r\n                                <td>{generateButton(choices[3][3])}</td>\r\n                                <td>{generateButton(choices[3][4])}</td>\r\n                            </tr>\r\n                            <tr style={{height: \"200px\"}}>\r\n                            <td style={{width: \"10px\"}}><Badge pill bg=\"primary\">Column 5</Badge></td>\r\n                                <td>{generateButton(choices[4][0])}</td>\r\n                                <td>{generateButton(choices[4][1])}</td>\r\n                                <td>{generateButton(choices[4][2])}</td>\r\n                                <td>{generateButton(choices[4][3])}</td>\r\n                                <td>{generateButton(choices[4][4])}</td>\r\n                            </tr>\r\n\r\n\r\n                        </tbody>\r\n\r\n\r\n                    </Table>\r\n                </Col>\r\n            </Row>\r\n        </>\r\n\r\n    );\r\n\r\n\r\n}\r\n\r\n\r\nfunction MainPage(){\r\n\r\n    return(\r\n        <>\r\n            <Board />\r\n        </>\r\n\r\n    );\r\n\r\n\r\n\r\n}\r\n\r\n\r\nReactDOM.render(\r\n\r\n    <React.StrictMode>\r\n\r\n        <MainPage />\r\n\r\n    </React.StrictMode>,document.getElementById('root')\r\n\r\n\r\n);"],"sourceRoot":""}